{
  "Math": "More complex operations with numbers.",
  "Math.FastRandom": "Fast, 16 bit, seedable (pseudo) random generator.",
  "Math.FastRandom.next": "@returns the next random number between 0x0001 and 0xFFFF inclusive",
  "Math.FastRandom.percentChance": "@returns a boolean with approximately the given percent chance to be true or false",
  "Math.FastRandom.percentChance|param|percent": "the percentage chance that the returned value will be true from 0 - 100",
  "Math.FastRandom.pickRandom": "Returns a random element from the given list",
  "Math.FastRandom.pickRandom|param|list": "The list to choose an element from",
  "Math.FastRandom.randomBool": "@returns a random boolean value",
  "Math.FastRandom.randomRange": "@returns a random value between min and max (inclusive). If min is greater than or equal to max, returns min.",
  "Math.FastRandom.randomRange|param|max": "the maximum value to generate",
  "Math.FastRandom.randomRange|param|min": "the minimum value to generate",
  "Math.FastRandom.reset": "Reset the state to the current seed",
  "Math.percentChance": "Returns a random boolean that is true the given percentage of the time.",
  "Math.percentChance|param|percentage": "The percentage chance that the returned value will be true from 0 - 100",
  "Math.pickRandom": "Returns a random element from the given list",
  "Math.pickRandom|param|list": "The list to choose an element from",
  "controller": "Access to game controls",
  "controller.Button.addEventListener": "Adds an event handler that will fire whenever the specified event\nis triggered on this button. Handlers added using this method will\nnot conflict with events added via onEvent. The same handler can\nnot be added for the same event more than once.\n* @param event     The event to subscribe to for this button",
  "controller.Button.addEventListener|param|handler": "The code to run when the event triggers",
  "controller.Button.isPressed": "Indicates if the button is currently pressed",
  "controller.Button.onEvent": "Run some code when a button is pressed, released, or held",
  "controller.Button.pauseUntil": "Pauses until a button is pressed or released",
  "controller.Button.pressureLevel": "Indicates how hard the button is pressed, 0-512",
  "controller.Button.removeEventListener": "Removes an event handler registered with addEventListener.\n* @param event     The event that the handler was registered for",
  "controller.Button.removeEventListener|param|handler": "The handler to remove",
  "controller.pauseUntilAnyButtonIsPressed": "Pause the program until a button is pressed",
  "controller.setRepeatDefault": "Configures the timing of the on button repeat event for all of the controller buttons",
  "controller.setRepeatDefault|param|delay": "number of milliseconds from when the button is pressed to when the repeat event starts firing, eg: 500",
  "controller.setRepeatDefault|param|interval": "minimum number of milliseconds between calls to the button repeat event, eg: 30",
  "game": "A single-LED sprite game engine\n\nGame transitions and dialog",
  "game.onPaint": "Draw on screen before sprites, after background",
  "game.onShade": "Draw on screen after sprites",
  "game.onUpdate": "Update the position and velocities of sprites",
  "game.onUpdateInterval": "Run code on an interval of time. This executes before game.onUpdate()",
  "game.runtime": "Returns the time since the game started in milliseconds"
}